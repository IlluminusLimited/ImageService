service: image-service

provider:
  name: aws
  runtime: nodejs6.10
  region: us-east-1
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:provider.stage, 'default'}
  endpointType: REGIONAL
  deploymentBucket:
      name: "pinster-serverless-deploy-${self:provider.stage}"
  package:
    exclude:
      - .git/**
      - .circleci/
      - lambda/test
      - node_modules
      - "*.md"

  iamRoleStatements:

    - Effect: 'Allow'
      Action:
        - "sns:Publish"
      Resource:
        - "${self:custom.failure_notification_sns_arn}"

    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::${self:custom.imageUploaderBucket}/*"

    - Effect: "Allow"
      Action:
        - "states:StartExecution"
      Resource:
        - "*"

    - Effect: "Allow"
      Action:
        - "rekognition:*"
      Resource:
        - "*"

    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource:
        - "arn:aws:lambda:::${self:custom.imageUploaderBucket}/*"
custom:
  logRetentionInDays: 14
  defaultStage: dev
  customDomain:
    domainName: image-service-${self:provider.stage}.pinster.io
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateName: image-service-dev.pinster.io
  failure_notification_sns: ImageServiceFailureSNS${self:provider.stage}
  failure_notification_sns_arn:
    Fn::Join:
      - ":"
      - - arn
        - aws
        - sns
        - Ref: AWS::Region
        - Ref: AWS::AccountId
        - ${self:custom.failure_notification_sns}
  imageBucketUrl: http://pinster-image-service-${self:provider.stage}.s3-website-#{AWS::Region}.amazonaws.com

  # if the bucket name is changed then you must go to the resources section and change it there too!
  # This is a stupid limitation of serverless
  # https://github.com/serverless/serverless/issues/2486
  # https://github.com/serverless/serverless/issues/2749
  imageUploaderBucket: pinster-image-service
  thumbnailProcessorName: thumbnail-processor-${self:provider.stage}
  pinsterApiUrl: https://api-${self:provider.stage}.pinster.io

functions:
  imageUploader:
    handler: lambda/lambda.upload
    events:
      - http:
          method: post
          path: images/upload
          cors: true
    memorySize: 1024
    environment:
          BUCKET_NAME: ${self:custom.imageUploaderBucket}

  startExecution:
    handler: lambda/lambda.startExecution
    events:
      - s3:
          bucket: ${self:custom.imageUploaderBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: raw/
    memorySize: 128
    environment:
      STATEMACHINE_ARN: "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:${self:custom.thumbnailProcessorName}"

  generateThumbnail:
    handler: lambda/lambda.generateThumbnail
    events:
      - http:
          method: get
          path: images/generate
          cors: true
    memorySize: 1024
    environment:
          BUCKET: ${self:custom.imageUploaderBucket}
          URL: ${self:custom.imageBucketUrl}

  moderate:
    handler: lambda/lambda.moderate
    memorySize: 128

  moveImage:
    handler: lambda/lambda.moveImage
    memorySize: 512
    environment:
        BUCKET: ${self:custom.imageUploaderBucket}
        PREFIX: ""
        URL: ${self:custom.imageBucketUrl}

  notifySuccess:
    handler: lambda/lambda.notifySuccess
    memorySize: 128
    environment:
      PINSTER_API_URL: ${self:custom.pinsterApiUrl}
      AUTH_TOKEN: AUTH_TOKEN_CHANGE_ME

  notifyFailure:
    handler: lambda/lambda.notifyFailure
    memorySize: 128
    environment:
      PINSTER_API_URL: ${self:custom.pinsterApiUrl}
      SNS_ARN: ${self:custom.failure_notification_sns_arn}

stepFunctions:
  stateMachines:
    imageUploadHandlerMachine:
      name: ${self:custom.thumbnailProcessorName}
      definition:
        Comment: "StateMachine for images"
        StartAt: Moderate
        States:
          Moderate:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-moderate"
            Next: MoveImage
            Catch:
            - ErrorEquals:
              - ModerationThresholdExceeded
              Next: NotifyFailure
          MoveImage:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-moveImage"
            Next: NotifySuccess
          NotifySuccess:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-notifySuccess"
            End: true
          NotifyFailure:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-notifyFailure"
            End: true

resources:
  Resources:
  # if the bucket name is changed then this resource name must be changed! This is a stupid limitation of serverless
  # https://github.com/serverless/serverless/issues/2486
  # https://github.com/serverless/serverless/issues/2749
    S3BucketPinsterimageservice:
      Type: 'AWS::S3::Bucket'
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, HEAD]
              AllowedOrigins: ['*']
              MaxAge: '3600'
        WebsiteConfiguration:
                IndexDocument: index.html
                RoutingRules:
                - RedirectRule:
                    HostName: ${self:custom.customDomain.domainName}
                    HttpRedirectCode: 307
                    Protocol: https
                    ReplaceKeyPrefixWith: images/generate?key=
                  RoutingRuleCondition:
                    HttpErrorCodeReturnedEquals: 404
    S3BucketPermissions:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:custom.imageUploaderBucket}
        PolicyDocument:
          Statement:
            - Principal: "*"
              Action:
                - s3:GetObject
              Effect: Allow
              Sid: "AddPerm"
              Resource: arn:aws:s3:::${self:custom.imageUploaderBucket}/*
    ImageServiceFailureSNS:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "${self:custom.failure_notification_sns}"
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-domain-manager
  - serverless-plugin-log-retention
