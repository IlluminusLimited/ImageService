require 'yaml'

serverless_command = ARGV[0]
call_serverless = true

unless serverless_command
  puts "\n\nServerless command argument is required! Command should be used like so:\nruby serverless.rb command stage\n\n"
  return
end

stage = ARGV[1]

unless stage
  puts "\n\nStage argument is required! Command should be used like so:\nruby serverless.rb command stage\n\n"
  return
end

call_serverless = true
call_serverless_string = ARGV[2]
call_serverless = false if call_serverless_string == 'false'

supported_stages = %w[dev prod]

unless supported_stages.include? stage
  puts "\n\nUnsupported stage: #{stage}. Valid stages are: #{supported_stages}\n\n"
  return
end

puts "\nBuilding serverless.yml from serverless_template.yml with correct bucket name for stage: #{stage}"
serverless = YAML.load_file('serverless_template.yml')
bucket_name = serverless['custom']['imageUploaderBucket']

unless bucket_name
  puts "\n\nFailed to find the uploader bucket in the serverless_template.yml file.\n\n"
  return
end

puts "Found Bucket name: #{bucket_name}"

supported_stages.each {|supported_stage| bucket_name.gsub!(/-?#{supported_stage}\Z/, '')}

# puts "Trimmed bucket name to not include stage suffix: #{bucket_name}"

s3_name = 'S3Bucket' + bucket_name.gsub('-', '').capitalize

puts "Looking for resource name starting with: #{s3_name}"

# puts "Looking through keys: #{serverless['resources']['Resources'].keys}"
found_keys = serverless['resources']['Resources'].keys.select {|key| /#{s3_name}.*/.match(key)}


if found_keys.size > 1
  puts "\n\nFound more than one possible bucket name. Not sure what to do: #{found_keys}\n\n"
  return
end

if found_keys.size < 1
  puts "\nFailed to find a resource matching: \"#{s3_name}\". Found Keys: #{found_keys}\n\n"
  return
end

new_bucket_name = bucket_name + "-#{stage}"

puts "New bucket name: #{new_bucket_name}"
serverless['custom']['imageUploaderBucket'] = new_bucket_name

new_s3_name = 'S3Bucket' + bucket_name.gsub('-', '').capitalize + stage

puts "New s3 resource name: #{new_s3_name}"
serverless['resources']['Resources'][new_s3_name] = serverless['resources']['Resources'].delete(found_keys.first)


unless call_serverless
  puts "Deleted profile statement to not corrupt sls deploy #{serverless['provider'].delete('profile')}"
end

puts "Writing new serverless.yml"

warning_message = <<-WARNING
# Do not edit this file, it is automatically generated by serverless.rb, any changes will be overridden
#
# The reason this file is generated from serverless.rb is because of a
# stupid limitation of serverless where keys can't be changed with variable substitutions
# https://github.com/serverless/serverless/issues/2486
# https://github.com/serverless/serverless/issues/2749
WARNING
File.open('serverless.yml', 'w') {|file| file.write(warning_message + serverless.to_yaml)}


if call_serverless
  puts "\nCalling Serverless with command: #{serverless_command}\n\n"

  output = []
  r, io = IO.pipe
  fork do
    system("sls #{serverless_command} --stage #{stage} -v", out: io, err: :out)
  end
  io.close
  r.each_line {|l| puts l; output << l.chomp}
else
  puts "\nDone!\n"
end